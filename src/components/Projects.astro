---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const projects = await getCollection('projects');
const title = 'Featured Projects';
---

<section id="projects" class="overflow-hidden bg-gradient-to-t from-bg to-container py-16">
	<div class="mx-auto w-full max-w-screen-xl p-4 md:p-6">
		<h2 class="mb-12 text-center text-4xl font-bold text-accent">{title}</h2>
		<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
			{
				projects.map((project) => (
					<div class="project-card overflow-hidden rounded-lg bg-container shadow-lg">
						<div class="card-content relative z-10">
							<Image
								src={project.data.image}
								alt={project.data.title}
								class="h-48 w-full object-cover"
							/>
							<div class="p-6">
								<h3 class="mb-2 text-xl font-semibold text-accent">{project.data.title}</h3>
								<p class="mb-4 text-text">{project.data.description}</p>
								<a
									href={`/projects/${project.slug}`}
									class="inline-block rounded-full bg-accent px-4 py-2 font-bold text-bg transition-colors duration-300 hover:bg-secondary">
									Learn More
								</a>
							</div>
						</div>
						<div class="card-overlay absolute inset-0 z-0 bg-accent opacity-0" />
					</div>
				))
			}
		</div>
	</div>
</section>

<script>
	import { animate, inView } from 'motion';

	interface AnimationElements {
		card: Element;
		image: HTMLImageElement | null;
		title: HTMLHeadingElement | null;
		description: HTMLParagraphElement | null;
		button: HTMLAnchorElement | null;
		overlay: HTMLElement | null;
	}

	function getCardElements(card: Element): AnimationElements {
		return {
			card,
			image: card.querySelector('img'),
			title: card.querySelector('h3'),
			description: card.querySelector('p'),
			button: card.querySelector('a'),
			overlay: card.querySelector('.card-overlay')
		};
	}

	function createCardAnimation(elements: AnimationElements): void {
		const { card, image, title, description, button, overlay } = elements;

		inView(card, () => {
			animate(card, { rotateY: [-90, 0], opacity: [0, 1] }, { duration: 1, easing: 'ease-out' });
			if (image) {
				animate(
					image,
					{ scale: [1.5, 1], opacity: [0, 1] },
					{ duration: 0.5, delay: 0.3, easing: 'ease-out' }
				);
			}
			if (title && description) {
				animate(
					title,
					{ y: [50, 0], opacity: [0, 1] },
					{ duration: 0.3, delay: 0.5, easing: 'ease-out' }
				);
				animate(
					description,
					{ y: [50, 0], opacity: [0, 1] },
					{ duration: 0.3, delay: 0.6, easing: 'ease-out' }
				);
			}
			if (button) {
				animate(
					button,
					{ scale: [0, 1], opacity: [0, 1] },
					{ duration: 0.3, delay: 0.7, easing: 'ease-out' }
				);
			}
			if (overlay) {
				animate(overlay, { opacity: [0, 0.1] }, { duration: 1, easing: 'ease-out' });
			}
		});
	}

	function setupHoverAnimation(card: Element): void {
		const overlay = card.querySelector('.card-overlay');
		card.addEventListener('mouseenter', () => {
			animate(card, { scale: [1, 1.05] }, { duration: 0.3 });
			if (overlay) {
				animate(overlay, { opacity: [0.1, 0.2] }, { duration: 0.3 });
			}
		});
		card.addEventListener('mouseleave', () => {
			animate(card, { scale: [1.05, 1] }, { duration: 0.3 });
			if (overlay) {
				animate(overlay, { opacity: [0.2, 0.1] }, { duration: 0.3 });
			}
		});
	}

	document.addEventListener('DOMContentLoaded', (): void => {
		const projectCards = document.querySelectorAll('.project-card');
		projectCards.forEach((card: Element) => {
			const elements = getCardElements(card);
			createCardAnimation(elements);
			setupHoverAnimation(card);
		});
	});
</script>
